package com.capgemini.pp.ui;

import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.Random;

import com.capgemini.pp.bean.Customer;
import com.capgemini.pp.exception.BankAccountException;
import com.capgemini.pp.service.*;

public class Ui {
	 //static long accountNumber=1000L;
    static Service s=new Service();
    
    public static void main(String[] args) throws BankAccountException  {
        try{
        
        Random r=new Random();
        long accountNumber= r.nextInt(1000000000);
        int choice,cont,age;
        long accnum,mobNum,aadhaar;
        double value,bal,balance,deposit,withdraw;
        String name,address,pan,fund,transaction;
        boolean result,b;
        Scanner sc = new Scanner(System.in);
        Scanner sc2 = new Scanner(System.in);
do {
    System.out.println("\nMenu\n");
    System.out.println("1.Create Account");
    System.out.println("2.Display Customer Details");
    System.out.println("3.Show Balance");
    System.out.println("4.Deposit");
    System.out.println("5.Withdraw");
    System.out.println("6.Fund Transfer");
    System.out.println("7.Print Transaction");
    System.out.println("8.Details of every customer");
    System.out.println("\nEnter your Choice");
    choice = sc.nextInt();
        
        
        switch (choice) {

        case 1:

            
            do{
                System.out.println("\nEnter Name [with Initial as capital]");
                name = sc2.nextLine();
                b=s.validateName(name);
                if(b==true)
                {
                    continue;
                }
                else
                {
                    System.out.println("\n name invalid");
                }
                }while(b==false);
            
            
            
            do{
                System.out.println("Enter Age [between 18 to 60]");
                age=sc.nextInt();
                b=s.validateAge(age);
                if(b==true)
                {
                    continue;
                }
                else
                {
                    System.out.println("\nage invalid");
                }
                }while(b==false);
            
            
            
            do{
                System.out.println("Enter Address");
                address = sc2.nextLine();
                b=s.validateAddress(address);
                if(b==true)
                {
                    continue;
                }
                else
                {
                    System.out.println("\naddress invalid");
                }
                }while(b==false);
            
            do{
                System.out.println("Enter mobile number [10 digits]");
                mobNum = sc.nextLong();
                String mob=Long.toString(mobNum);
                b=s.validateNum(mob);
                if(b==true)
                {
                    continue;
                }
                else
                {
                    System.out.println("Mobile Number invalid");
                }
                }while(b==false);
            
            do{
                System.out.println("enter aadhaar number [12 digits]");
                aadhaar=sc.nextLong();
                String aadhaarNum=Long.toString(aadhaar);
                b=s.validateAadhaar(aadhaarNum);
                if(b==true)
                {
                    continue;
                }
                else
                {
                    System.out.println("\naadhaar invalid");
                }
                }while(b==false);
            
            do{
                System.out.println("enter Pan number [10 characters]");
                pan=sc.next();
                b=s.validatePan(pan);
                if(b==true)
                {
                    continue;
                }
                else
                {
                    System.out.println("pan invalid");
                }
                }while(b==false); 
 
            do{
                System.out.println("\nEnter the amount to be added to your account");
                bal = sc.nextDouble();
                b=s.validateBalance(bal);
                if(b==true)
                {
                    continue;
                }
                else
                {
                    System.out.println("Invalid amount");
                }
                }while(b==false);
            
            transaction="Transactions are";
            Customer c=new Customer();
            c.setAccountNum(accountNumber);
            c.setName(name);
            c.setAge(age);
            c.setAddress(address);
            c.setPan(pan);
            c.setAadhaar(aadhaar);
            c.setBalance(bal);
            c.setMobNum(mobNum);
            c.setTransaction(transaction);
            System.out.println("before");
            System.out.println(accountNumber);
            result=s.createAccount(c);
            System.out.println("after");
            accountNumber++;
            if(result)
            {
                System.out.println("Account created successfully and your account number is "+ c.getAccountNum());
            }
            else
            {
                System.out.println("Account not created");
            }
            break;
        case 2:
        	Customer c2=null;
        	System.out.println("enter account number");
            Long accNum2=sc.nextLong();
            int result2=s.validateAccountNumber(accNum2);
            if(result2==0){
            	System.out.println("Invalid Account Number");
            	break;
            }
            else{
            System.out.println("Customer details");
            c2=s.customerDetails(accNum2);
            System.out.println(c2);
            break;
            }
        case 3:
            System.out.println("enter account number");
            Long accNum3=sc.nextLong();
            int result3=s.validateAccountNumber(accNum3);
            if(result3==0){
            	System.out.println("Invalid Account Number");
            	break;
            }
            else{
            balance=s.showBalance(accNum3);
            System.out.println("Balance is "+balance);
            break;
            }
        case 4:
            System.out.println("enter account number");
            Long accNum4=sc.nextLong();
            int result4=s.validateAccountNumber(accNum4);
            if(result4==0){
            	System.out.println("Invalid Account Number");
            	break;
            }
            else{
            System.out.println("enter amount");
            value=sc.nextDouble();
            deposit=s.deposit(accNum4,value);
            System.out.println("Amount Deposited and Rs."+deposit+ " is balance ");
            break;
            }
        case 5:
            System.out.println("enter account number");
            Long accNum5=sc.nextLong();
            int result5=s.validateAccountNumber(accNum5);
            if(result5==0){
            	System.out.println("Invalid Account Number");
            	break;
            }
            else{
            System.out.println("enter amount");
            value=sc.nextDouble();
            withdraw=s.withdraw(accNum5,value);
            System.out.println("Money withdrawn and the balance is"+withdraw);
            break;
            }
        case 6:
            System.out.println("enter account number");
            Long accNum6=sc.nextLong();
            System.out.println("enter account number to be transferred");
            Long accNumber6=sc.nextLong();
            int res6=s.validateAccountNumber(accNum6);
            int result6=s.validateAccountNumber(accNumber6);
            if(res6==0){
            	System.out.println("Invalid Source Account Number");
            	break;
            }
            else if(result6==0){
            	System.out.println("Invalid Destination Account Number");
            	break;
            }
            else{
            System.out.println("enter amount");
            value=sc.nextDouble();
            fund=s.fundTransfer(accNum6,accNumber6,value);
            System.out.println(fund);
            break;
            }
        case 7:
            System.out.println("enter account number");
            Long accNum7=sc.nextLong();
            System.out.println("My Transactions\n");
            System.out.println(s.printTransaction(accNum7));
            break;
        case 8:
            System.out.println("All Customer Details");
            List<Customer> custList;
    		try {
    			custList =s.getAllCustomers();
    			Iterator<Customer> iterator=custList.iterator();
    			while(iterator.hasNext())
    			{
    			System.out.println(iterator.next());	
    			}			
    			
    		} catch (BankAccountException e) {			
    			e.printStackTrace();
    		}
            break;
        default:
            System.out.println("wrong choice");
            break;
        }
        System.out.println("Are you want to continue transaction?(press 1 for yes)");
        cont=sc.nextInt();
        
    }while(cont==1);
sc.close();
sc2.close();
        }
        
        catch(Exception e)
        {
            System.out.println(e);
            throw new BankAccountException("Exception Occured");
        }

    }
}











package com.capgemini.pp.bean;



import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

import com.sun.istack.internal.NotNull;

@Entity
public class Customer {
	@Id
	//@GeneratedValue(strategy=GenerationType.IDENTITY)
	private long accountNum;
	private String name;
	@NotNull
	private int age;
	private String address; 
	private String pan;
	private long aadhaar;
	private double balance;
	private long mobNum;
	private String transaction;

	
    public Customer() {
		
	}
    
    
    
	public Customer(long accountNum, String name, int age, String address,
			String pan, long aadhaar, double balance, long mobNum, String transaction) {
		super();
		this.accountNum = accountNum;
		this.name = name;
		this.age = age;
		this.address = address;
		this.pan = pan;
		this.aadhaar = aadhaar;
		this.balance = balance;
		this.mobNum = mobNum;
		this.transaction=transaction;
	}



	public long getAccountNum() {
        return accountNum;
    }
    public void setAccountNum(long accountNum) {
        this.accountNum = accountNum;
    }
    
	 public void setName(String name){
	        this.name=name;
	    }
	    public String getName(){
	        return this.name;
	    }
	    

	    public int getAge() {
	        return age;
	    }
	    public void setAge(int age) {
	        this.age = age;
	    }

	    
	    public String getAddress() {
	        return address;
	    }

	    public void setAddress(String address) {
	        this.address = address;
	    }
	     
	    
	    
	    public String getPan() {
	        return pan;
	    }
	    public void setPan(String pan) {
	        this.pan = pan;
	    }
	    
	    
	    public long getAadhaar() {
	        return aadhaar;
	    }
	    public void setAadhaar(long aadhaar) {
	        this.aadhaar = aadhaar;
	    }
	    
	    
	    public double getBalance() {
	        return balance;
	    }
	    public void setBalance(double balance) {
	        this.balance = balance;
	    }
	    
	    public long getMobNum() {
	        return mobNum;
	    }
	    public void setMobNum(long mobNum) {
	        this.mobNum = mobNum;
	    }
	    	    
	    public String getTransaction() {
			return transaction;
		}



		public void setTransaction(String transaction) {
			this.transaction = transaction;
		}



		@Override
	    public String toString(){
	        return "\nName: "+name+ 
	                "\nAccount Number: "+accountNum+
	                "\nBalance: "+balance+  
	                "\nAge: "+age+
	                "\nMobile Number: "+mobNum+
	                "\nAddress: "+address+
	                "\nAadhaar Number: "+aadhaar+
	                "\nPan Number: "+pan+"  "+transaction;
	        
	    }

	}









package com.capgemini.pp.service;

import java.util.List;
import java.util.Map;

import com.capgemini.pp.bean.Customer;
import com.capgemini.pp.exception.BankAccountException;

public interface ServiceInterface {
    public boolean createAccount(Customer c) throws BankAccountException;
    public double showBalance(long accnum) throws BankAccountException;
    public Customer customerDetails(Long accnum) throws BankAccountException;
    public double deposit(long accnum,double amount) throws BankAccountException;
    public double withdraw(long accnum, double amount)  throws BankAccountException;
    public String fundTransfer(long accnum,long accnum2, double amount) throws BankAccountException;
    public String printTransaction(long accnum) throws BankAccountException;
    public List<Customer> getAllCustomers() throws BankAccountException;
    
}







package com.capgemini.pp.service;

import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.capgemini.pp.bean.Customer;
import com.capgemini.pp.dao.*;
import com.capgemini.pp.exception.BankAccountException;

public class Service implements ServiceInterface {
	   
    Dao d=null;
    double check;
    
    public int validateAccountNumber(Long accnum){
    	d=new Dao();
		return d.validateAccountNumber(accnum);
    	
    }
    public boolean validateName(String name2) throws BankAccountException
    {
    boolean flag=false;
    Pattern name=Pattern.compile("^[A-Z][A-za-z,\\s]+");
    Matcher nameMatch=name.matcher(name2);
    if(nameMatch.matches())
    {
        flag=true;
    }
    else
    {
        flag=false;
    }
    return flag;
    }
    
    
    public boolean validateAge(int age) throws BankAccountException
    {
    boolean flag=false;
    if(age>=18&&age<=60)
    {
        flag=true;
    }
    else
    {
        flag=false;
    }
    return flag;
    }
    
    
    public boolean validateAddress(String address) throws BankAccountException
    {
    boolean flag=false;
    Pattern name=Pattern.compile("(?=,*[0-9])[A-Za-z0-9,\\s]+");
    Matcher nameMatch=name.matcher(address);
    if(nameMatch.matches())
    {
        flag=true;
    }
    else
    {
        flag=false;
    }
    return flag;
    }

    
    public boolean validateNum(String mobnum) throws BankAccountException
    {
    boolean flag=false;
    Pattern name=Pattern.compile("[0-9]{10}");
    Matcher nameMatch=name.matcher(mobnum);
    if(nameMatch.matches())
    {
        flag=true;
    }
    else
    {
        flag=false;
    }
    return flag;
    }
    
    
    public boolean validateAadhaar(String aadhaar) throws BankAccountException
    {
    boolean flag=false;
    Pattern name=Pattern.compile("^[0-9]{12}");
    Matcher nameMatch=name.matcher(aadhaar);
    if(nameMatch.matches())
    {
        flag=true;
    }
    else
    {
        flag=false;
    }
    return flag;
    }
    
    
    
    
    public boolean validatePan(String pan) throws BankAccountException
    {
    boolean flag=false;
    Pattern name=Pattern.compile("[A-Z0-9]{10}");
    Matcher nameMatch=name.matcher(pan);
    if(nameMatch.matches())
    {
        flag=true;
    }
    else
    {
        flag=false;
    }
    return flag;
    }
    

    
    public boolean validateBalance(double balance) throws BankAccountException
    {
    boolean flag=false;
    if(balance>=0)
    {
        flag=true;
    }
    else
    {
        flag=false;
    }
    return flag;
    }
    
    
    
    public boolean createAccount(Customer c) throws BankAccountException {
       d=new Dao();
       return d.createAccount(c);
    }


    
    public Customer customerDetails(Long accnum) throws BankAccountException {
    	Customer c2=null;
    	d=new Dao();
    	c2=d.customerDetails(accnum);
        return c2;
    }


    public double showBalance(long accnum) throws BankAccountException {
    	d=new Dao();
        double bal = 0;    
        Customer c3= d.showBalance(accnum);
        bal = c3.getBalance();
      return bal;
    }
    
    public double deposit(long accnum,double amount) throws BankAccountException{
    	d=new Dao();
        double dep = 0;
        Customer c4= d.customerDetails(accnum);
             dep = c4.getBalance() + amount;
             c4.setBalance(dep); 
             String s1 =c4.getTransaction().concat("\n"+amount+" is Deposited");
             c4.setTransaction(s1);
             d.deposit(c4);
            
      return dep;

    }
    
    
    public double withdraw(long accnum, double amount) throws BankAccountException{
    	d=new Dao();
        double wd = 0;
        

        Customer c5= d.customerDetails(accnum);
        if (amount<=c5.getBalance() ) {
            wd = c5.getBalance() - amount;
            c5.setBalance(wd);
            String s2 =c5.getTransaction().concat("\n"+amount+" is Withdrawn");
            c5.setTransaction(s2);
            d.withdraw(c5);
        }
        else
        {
          throw new BankAccountException("Invalid account");
        }

      
      return wd;

    }
    
    public String fundTransfer(long accnum,long accnum2, double amount) throws BankAccountException  {
        
    	d=new Dao();
        double check1,check2;
        String fund=null;
        double b1=0,b2=0;
        b1=withdraw(accnum,amount);
        if(b1!=0) {
            b2=deposit(accnum2,amount);
            fund="After the fund transfer:\n Balance in the source account is "+b1+
                    " \n Balance in the destination account is "+b2;
            }

       else
        {
            fund="Transfer failed";
        }
        return fund;
    }
    
    public String printTransaction(long accnum) throws BankAccountException{
    	System.out.println("hi1");
    	Customer c6=d.customerDetails(accnum);	
    	 System.out.println("hi2");
    	 String value=c6.getTransaction();
    	 System.out.println("hi3");
        return value;
    }

    
	@Override
	public List<Customer> getAllCustomers() throws BankAccountException {
		d=new Dao();
		return d.getAllCustomers();
	}
    
}









package com.capgemini.pp.dao;

import java.util.List;
import java.util.Map;

import com.capgemini.pp.bean.Customer;
import com.capgemini.pp.exception.BankAccountException;

public interface DaoInterface {

    public boolean createAccount(Customer c) throws BankAccountException ;
    public Customer customerDetails(Long accnum) throws BankAccountException ;
    public Customer showBalance(long accnum) throws BankAccountException ;
    public void deposit(Customer c) throws BankAccountException ;
    public void withdraw(Customer c) throws BankAccountException ;
    public int fundTransfer(long accnum) throws BankAccountException ;
    public Customer printTransaction(long accnum) throws BankAccountException ;
   	public List<Customer> getAllCustomers() throws BankAccountException;
    
}






package com.capgemini.pp.dao;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.PersistenceException;
import javax.persistence.Query;

import com.capgemini.pp.bean.Customer;
import com.capgemini.pp.exception.BankAccountException;
import com.capgemini.pp.utility.JPAUtil;

public class Dao implements DaoInterface {
	private EntityManager entityManager;
	
	
	public int validateAccountNumber(Long accnum){
		
		entityManager=JPAUtil.getEntityManager();
		Customer c=entityManager.find(Customer.class, accnum);
		if(c==null)
		{
			return 0;
		}
		else
		{
		return 1;
	}
	}
	
	
	

	@Override
	public boolean createAccount(Customer c) throws BankAccountException {
		EntityManager entityManager = null;	
		try{
			boolean result=false;
			entityManager=JPAUtil.getEntityManager();
			EntityTransaction transaction=entityManager.getTransaction();
			transaction.begin();
			entityManager.persist(c);
			transaction.commit();
	        result=true;
	        return result;
		}catch(PersistenceException e) {
			throw new BankAccountException(e.getMessage());
		}finally {
			entityManager.close();
		}
	}
	
	
	
	@Override
	public Customer customerDetails(Long accnum) throws BankAccountException {
		try{

			entityManager=JPAUtil.getEntityManager();
			Customer c=entityManager.find(Customer.class, accnum);
			return c;
		}catch(PersistenceException e) {
			throw new BankAccountException(e.getMessage());
		}finally {
			entityManager.close();
		}
	}
	
	
	@Override
	public Customer showBalance(long accnum) throws BankAccountException {
		try{
			entityManager=JPAUtil.getEntityManager();
			Customer c=entityManager.find(Customer.class, accnum);
			return c;
		}catch(PersistenceException e) {
			throw new BankAccountException(e.getMessage());
		}finally {
			entityManager.close();
		}
	}
		
	@Override 
	public void deposit(Customer c) throws BankAccountException{
		try{
			entityManager=JPAUtil.getEntityManager();
			entityManager.getTransaction().begin();
			entityManager.merge(c);
			entityManager.getTransaction().commit();		
		}catch(PersistenceException e) {
			e.printStackTrace();
			throw new BankAccountException(e.getMessage());
		}finally {
			entityManager.close();
		}
		
	}
	
	@Override public void withdraw(Customer c) throws BankAccountException{
		try{
			entityManager=JPAUtil.getEntityManager();
			entityManager.getTransaction().begin();
			entityManager.merge(c);
			entityManager.getTransaction().commit();
		}catch(PersistenceException e) {
			e.printStackTrace();
			throw new BankAccountException(e.getMessage());
		}finally {
			entityManager.close();
		}
		
	}
	
	
	@Override
	public List<Customer> getAllCustomers() throws BankAccountException {
		try{
			entityManager=JPAUtil.getEntityManager();
			Query query=entityManager.createQuery("from Customer");
			List<Customer> employeeList=query.getResultList();
			return employeeList;
		}
		catch(PersistenceException e){
			e.printStackTrace();
			throw new BankAccountException(e.getMessage());
		}finally {
			entityManager.close();
		}
	
}
	








	@Override
	public int fundTransfer(long accnum) throws BankAccountException {
		// TODO Auto-generated method stub
		return 0;
	}




	@Override
	public Customer printTransaction(long accnum) throws BankAccountException {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	


	    
}







<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
                  http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd" version="2.0">
	<persistence-unit name="ParallelProject">
		<provider>org.hibernate.ejb.HibernatePersistence</provider>
		<class>com.capgemini.pp.bean.Customer</class>		
		<properties>
			<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/parallel_project"/>
			<property name="javax.persistence.jdbc.user" value="root"/>
			<property name="javax.persistence.jdbc.password" value="root"/> 
			<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver"/>
			<property name="hibernate.hbm2ddl.auto" value="update"/>
		</properties>
	</persistence-unit>
</persistence>






package com.capgemini.pp.utility;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class JPAUtil {
	
	public static EntityManager getEntityManager() {
		
		return Persistence.createEntityManagerFactory("ParallelProject").createEntityManager();
	}
	
}
